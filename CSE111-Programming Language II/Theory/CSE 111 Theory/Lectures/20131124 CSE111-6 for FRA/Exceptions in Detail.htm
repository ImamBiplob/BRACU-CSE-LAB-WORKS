<!DOCTYPE html PUBLIC "-//IETF//DTD HTML//EN">
<!-- saved from url=(0106)http://www.cs.cmu.edu/afs/cs/Web/People/pattis/15-1XX/15-200/lectures/exceptions/lecture.html#Introduction -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <title>Exceptions in Detail</title>
</head>

<body bgcolor="white">

<center>
<h1>Exceptions in Detail<br>(Especially Inheritance)</h1>
<p>
</p><h2>Advanced Programming/Practicum<br>
15-200<br>
</h2>
<p>
</p></center>


<!-- Introduction -->

<a name="Introduction"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width="20%"><b>Introduction</b></td>
<td width="80%">
  In this lecture we will continue our discussion of inheritance by examining
    exceptions more closely: the two are closely linked, and up till now
    we could not truly understand the meaning/use of exceptions, although we
    were still able to use them effectively if only naively.
  Specifically, we will first learn that all the exception classes are
    arranged in a massive hierarchy; knowledge of this hierarchy is useful in
    a detailed understanding how <b>catch</b> works.
  We will also examine the difference between how <b>checked</b> and
    <b>unchecked</b> exceptions are declared and processed by the Java
    compiler (there is no runtime difference).
  Finally we will learn how two write exception classes and re-throw
    exceptions.
</td>
</tr></tbody>
</table>


<!-- Inheritance Hierarchy -->

</a><a name="Hierarchy"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width="20%"><b>The Throwable Inheritance Hierarchy</b></td>
<td width="80%">
  Here is a diagram of the most prominent classes in the inheritance hierarchy
   that Java uses for throwing exceptions.
  <p>
  <img src="./Exceptions in Detail_files/throwable.gif">
  </p><p>
  Below is a much longer -but still not complete- list of the the first four
    levels in this hierarchy; indentation indicates the subclass relationship:
     e.g., the <b>Error</b> class is a subclass of <b>Throwable</b> (and the
    <b>Throwable</b> class itself is a subclass of <b>Object</b>).
  For an objects to be throwable (e.g., <b>throw new ...</b>), it must be
    constructed from some class in the <b>Throwable</b> hierarchy (either
    <b>Throwable</b> or one of its subclasses).
  The <b>Throwable</b> class itself declares two constructors (one with a 
    message <b>String</b>, one without), and a few interesting methods
    (<b>getMessage</b> and various overloaded versions of
    <b>printStackTrace</b>) that are inherited in sublcasses and often called
    when exceptions are caught).
  </p><p>
  The top three classes in this hierarchy (the <b>Throwable</b>, <b>Error</b>,
    and <b>Exception</b> classes) are all defined in the <b>java.lang</b>
    package (which is automatically imported into every class file).
  Many other exceptions are also defined in this package, while others are
     defined elsewhere (e.g., <b>IOException</b> is defined in the
     <b>java.io</b>package; <b>EmptyStackException</b> is defined in the
     <b>java.util</b>) package.
  Many of the exceptions that we have seen are under the hierarchy:
    <b>Throwable</b>, <b>Exception</b>, <b>RuntimeException</b>.
  </p><p>
  I compiled the following list by visiting the JavaDoc pages in Sun's API and
    doing lots of copying and pasting.
  As you can imagine by the length of this list of built-in classes,
    exceptions are central to the Java language.
  Understanding how to throw and catch exceptions is intergral to understanding
     Java and and how to program in it.
  </p><p>
  Note that the prime reason that so many different exception classes exist is
    their different names.
  The names are used in <b>try/catch</b> statements to decide selectively
    which exceptions to catch, and how to process these exceptions differently.
  When we define new classes whose methods throw exceptions, we can throw any
    of the exception classes already written, or we might want to define new
    exception classes, and by throwing them signal some special failure in the
    ability of methods to perform their required actions. 
  </p><pre><b>Throwable
  Error
    AWTError
    LinkageError
     ClassCircularityError
     ClassFormatError
     ExceptionInInitializerError
     IncompatibleClassChangeError
     NoClassDefFoundError
     UnsatisfiedLinkError
     VerifyError
    ThreadDeath
    VirtualMachineError
      InternalError
      OutOfMemoryError
      StackOverflowError
      UnknownError 
  Exception
    AclNotFoundException
    ActivationException
      UnknownGroupException
      UnknownObjectException 
    AlreadyBoundException
    ApplicationException
    AWTException
    BadLocationException
    ClassNotFoundException
    CloneNotSupportedException
      ServerCloneException
    DataFormatException
    ExpandVetoException
    FontFormatException
    GeneralSecurityException
      CertificateException
      CRLException
      DigestException
      InvalidAlgorithmParameterException
      InvalidKeySpecException
      InvalidParameterSpecException
      KeyException
      KeyStoreException
      NoSuchAlgorithmException
      NoSuchProviderException
      SignatureException
      UnrecoverableKeyException 
    IllegalAccessException
    InstantiationException
    IntrospectionException
    InvalidMidiDataException
    InvocationTargetException
    IOException
      ChangedCharSetException
      CharConversionException
      EOFException
      FileNotFoundException
      InterruptedIOException
      MalformedURLException
      ObjectStreamException
      ProtocolException
      RemoteException
      SocketException
      SyncFailedException
      UnknownHostException
      UnknownServiceException
      UnsupportedEncodingException
      UTFDataFormatException
      ZipExcept
    LastOwnerException
    LineUnavailableException
    MidiUnavailableException
    MimeTypeParseException
    NamingException
      AttributeInUseException
      AttributeModificationException
      CannotProceedException
      CommunicationException
      ConfigurationException
      ContextNotEmptyException
      InsufficientResourcesException
      InterruptedNamingException
      InvalidAttributeIdentifierException
      InvalidAttributesException
      InvalidAttributeValueException
      InvalidNameException
      InvalidSearchControlsException
      InvalidSearchFilterException
      LimitExceededException
      LinkException
      NameAlreadyBoundException
      NameNotFoundException
      NamingSecurityException
      NoInitialContextException
      NoSuchAttributeException
      NotContextException
      OperationNotSupportedException
      ReferralException
      SchemaViolationException
      ServiceUnavailableException
    NoninvertibleTransformException
    NoSuchFieldException
    NoSuchMethodException
    NotBoundException
    NotOwnerException
    ParseException
    PartialResultException
    PrinterException
      PrinterAbortException
      PrinterIOException 
    PrivilegedActionException
    RemarshalException
    RuntimeException
      ArithmeticException
      ArrayStoreException
      CannotRedoException
      CannotUndoException
      ClassCastException
      CMMException
      ConcurrentModificationException
      EmptyStackException
      IllegalArgumentException
        IllegalParameterException
        IllegalThreadStateException
        NumberFormatException
      IllegalMonitorStateException
      IllegalPathStateException
      IllegalStateException
      ImagingOpException
      IndexOutOfBoundsException
      MissingResourceException
      NegativeArraySizeException
      NoSuchElementException
      NullPointerException
      ProfileDataException
      ProviderException
      RasterFormatException
      SecurityException
      SystemException
      UndeclaredThrowableException
      UnsupportedOperationException
    SQLException
      BatchUpdateException
      SQLWarning
    TooManyListenersException
    UnsupportedAudioFileException
    UnsupportedFlavorException
    UnsupportedLookAndFeelException
    UserException 
      AlreadyBound
      BadKind
      Bounds
      Bounds
      CannotProceed
      InconsistentTypeCode
      Invalid
      InvalidName
      InvalidName
      InvalidSeq
      InvalidValue
      NotEmpty
      NotFound
      PolicyError
      TypeMismatch
      UnknownUserException
      WrongTransaction</b></pre>     
  The class <b>Error</b> and its subclasses indicate something wrong with Java
     itself.
  It is recommended that programs not throw, or attempt to catch, these errors,
    but instead let Java itself throw and terminate any program throwing them.
  Thus, we have and will continue to focus on the class <b>Exception</b> and
   the subclasses its hierarchy.
  <p>
  Here is a Javadoc page for the <b>IllegalArgumentException</b> class.
  Notice its package, its superclasses, and its known (to the standard Java
   library) subclasses.
  </p><p>
  <img src="./Exceptions in Detail_files/javadoc.gif">
  </p><p>
  Also notice that this class specifies two constructors (as all exception
    class should): one parameterless and one with a <b>String</b> parameter,
    which should have <b>message</b> as its parameter's name.
  Notice too that none of the superclasses of this class (except
    <b>Throwable</b>, which defines <b>getMessage</b> and various stack
    tracing methods), define any methods that this class inherits.
  The <b>getMessage</b> method returns <b>String</b> parameter (the generic
    name <b>s</b>; it should be <b>message</b>) used in the second constructor.
  So, if they define no new methods, why do all these intervening classes
    exist?
  They exist solely to form an inheritance hierarchy, whose use in Java is 
    described below.
</p></td>
</tr></tbody>
</table>



<!-- Catch -->

</a><a name="Catch"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width="20%"><b>Catching Exceptions in a Hierachy</b></td>
<td width="80%">
   There are three simple, salient, and related facts about <b>catch</b>
     clauses that we can now fully explore because of our knowledge of
     inheritance.
   We can explain these features in detail here, although a naive understanding
     of them is often enough to do simple exception processing in programs
    (like the standard way that we read files, using the <b>EOFException</b>
    to indicate nothing else to read).
   <p>
   First a <b>catch</b> clause catches an exception if the thrown object is an
     <b>instanceof</b> the type that is specified in the <b>catch</b> clause.
   Thus, given the hierarchy above, the clause
     <b>catch (RuntimeException re){...}</b> will catch thrown objects
     constructed from the <b>RuntimeException</b> class, as well as any thrown
     objects constructed from any subclasses of <b>RuntimeException</b> (of
     which there are a huge number).
   </p><p>
   Second, the identifier <b>re</b> acts like a parameter variable in the block
     associated with the <b>catch</b> clause: Java initializes it to refer to
     the caught object.
   Thus, inside the block we can refer to this variable: e.g., call methods on
     it: <b>re.getMessage()</b> (whose method is defined in the
     <b>Throwable</b> class and inherited by all its subclasses).
   Of course, if the object thrown is an instance of <b>RuntimeException</b>,
     then the assignment of a reference to <b>re</b> will work by implicit
     upcasting.
   Most often, though, the variable is not used in the associated block; it
     is enough to know which class of exception is thrown.
   Typically, I name this variable in all lower-case letters, using the
     upper-case letters in the class name.
   </p><p>   
   Sometimes we will write a <b>catch</b> clause specifying the
     <b>IOException</b> type, which catches <b>EOFException</b> objects, as
     well as others that cause I/O to fail (<b>EOFException</b> is a subclass
     of <b>IOException</b>).
   By specifying a type high up in the inheritance hierarchy, a <b>catch</b>
     clause can catch many different exception classes in the hierarchy.
   </p><p>
   Third, Java checks the <b>catch</b> clauses sequentially.
   Thus, if I specify
   </p><pre><b>  catch (EOFException eofe){...}
  catch (IOException ioe)  {...}</b></pre>
   Then an <b>EOFException</b> will be caught by the first <b>catch</b> clause
     while all other exceptions that have <b>IOException</b> as their
     superclass (or <b>IOException</b> itself) are caught by the second
     <b>catch</b> clause.
   <p>
   Note that because of this sequentiallity, it would be "silly" to write
   </p><pre><b>  catch (IOException ioe)  {...}  
  catch (EOFException eofe){...}</b></pre>
   because a <b>EOFExeption</b> would be caught by the first <b>catch</b>
    clause, before ever reaching the second.
   In fact, the Java compiler knows this too, and would detect and report an
     error if these clauses appear in this order -with one blocking the use
     of a later one; this is  similar to its "unreachable code" message, which
     indicates that some use of control structures makes it impossible to
      execute some line of code: as in <b>return 0; return 1;</b>.
   <p>
   These three features give us precise control over how exceptions are caught
      and processed.
   Again, this control becomes necessary only in complicated applications that
     must accurately diagnose and safely recover from all kinds of problems.
</p></td>
</tr></tbody>
</table>



<!-- Checked and Unchecked Exceptions -->

</a><a name="Checked"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width="20%"><b>Checked and Unchecked Exceptions</b></td>
<td width="80%">
  Java exception classes (we will ignore errors here, and focus on exceptions)
    are categorized as either "checked" or "unchecked".
  These categorization affect compile-time behavior only; they are handled
    identically at runtime.
  We (and Java) can easily determine in which category each exception is
    defined.
  <ul>
  <li>An unchecked exception is any class that IS A SUBCLASS of
        <b>RuntimeException</b> (as well as <b>RuntimeException</b> itself).
  </li><li>A checked exception is any class that is NOT A SUBCLASS of
        <b>RuntimeException</b>.
  </li></ul>
  The Java compiler treats theses classes differently, with the checked
    exceptions being treated more carefully.
  <p>
  So, how does the compiler treat "checked" exceptions more carefully?
  In one simple way: if the code in a primary method calls a secondary method
    that can throw a checked exception, then the primary method must catch the
    exception or specify that exception in the <b>throws</b> part of its
    header.
  If it fails to provide either of these options, the Java compiler will detect
     and report an error.
  There are no such restrictions on unchecked exceptions.
  </p><p>
  The purpose of the <b>throws</b> part of a method definition is to make clear
    to anyone calling the method what exceptional circumstances the method
    might detect but not be able to handle internally.
  These details are important to any programmer who wants to write code that
    calls such a method.
  </p><p>
  So why are unchecked exceptions treated differently?
  This is subtle question.
  The best answer that I have read is that these exceptions are mostly caused
    by programmers writing incorrect code.
  On the other hand, checked exceptions are caused by external conditions,
    beyond the control of the programmer.
  </p><p>
  For example, the <b>IndexOutOfBoundException</b> is an unchecked exception.
  Typically, if this exception is thrown, it is because the programmer has
    written an incorrect loop that access the array at some illegal index.
  There is little reason for the program to try to detect such errors and
    catch them, or to propagate them out of the method in which they occur
    to be caught by other methods.
  Best to have Java automatically catch such exceptions and print an error
    message including a stack trace, so that the programmer can try to fix
    the bug.
  </p><p>
  A stack trace, printed in the console window, starts with the exception
    message and the method name, line number, and file name where the
    exception was thrown.
  Next comes the method that called this one (and from which line number in
    which file).
  This continues until the <b>main</b> method is reached (and the line number
    it was executing and the file in which it was in).
  That is the last line in the trace.
  </p><p>
  In contrast, <b>EOFException</b> is a checked exception.
  When it is thrown, it is not because the programmer wrote incorrect code
    (we cannot even check "is there another datum in the file"; we have to
    commit to trying to read one and then learn of the result), it is because
    external conditions do not allow another value to be read from a file.
  So, one way to distinguish these exceptions is by the "source" of the error:
    whether it is internal or external to the program's code.
  </p><p>
  There are some code examples that blur this distinction.
  We could use the following code to add up all the values in an array
    <b>int[] a</b>.
  <b></b></p><pre><b>  int sum = 0;
  for(int i=0;;i++)
    try {
      sum += a[i]
    }catch (IndexOutOfBoundsException ioobe) {break;}</b></pre>
  Here we use an exception just as we would use an <b>EOFException</b>: to
    terminate the summing loop.
  But, the difference is that we can make this code work without exceptions
    at all, by writing the loop's header as
    <b>for(int i=0; i&lt;a.length; i++)</b>.
  <p>
  Another reason for the distinction is that unchecked exceptions can occur in
    any statement that accesses a member of an object
   (<b>NullPointerExceptions</b>).
  Thus, to avoid cluttering up method definitions, such exceptions do not have
    to be caught or listed after <b>throws</b>.
  Certainly we can list these exceptions after <b>throws</b> (and I often do)
    to indicate that the method might be thrown, but the Java compiler does
    not require it.
  </p><p>
  When programmers write a new exception class in Java, it should probably be
    a subclass of <b>Exception</b>, not <b>RuntimeExeption</b>.
  This approach is very strongly advocated in the Java Language Reference
    Manual.
  In fact, although we have studied many exceptions that are subclasses of
    <b>RuntimeException</b> (because they are intimately related to the
    semantics of Java's language elements), most exceptions in the large list
    above are checked exceptions.
  </p><p>
  Download a small program that defines new checked and unchecked exceptions,
     and illustrates how the Java compiler treats them differently.
  It is stored in <a href="http://www.cs.cmu.edu/afs/cs/Web/People/pattis/15-1XX/15-200/programs/exceptions.zip">
    Exception Demonstration</a>.
</p></td>
</tr></tbody>
</table>



<!-- Writing New Exception Classes -->

</a><a name="Writing"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width="20%"><b>Writing New Exception Classes</b></td>
<td width="80%">
  It is simple to define a new exception class.
  First, we must decide whether it should be a subclass of some other
    exception: if so we extend that class; if not we need to decide
    whether it should be a checked or unchecked (see the discussion above),
    extending <b>Exception</b> or <b>RuntimeException</b> respectively.
  The class should have the two standard constructors for exception classes
    (whose bodies just call <b>super</b>), and define no other fields or
    methods.
  That's it (unless you want to do something very non-standard).
  It would look something like this.
<b><pre>  public MyException extends Exception
    public MyException()
    {super();}

    public MyException(String message)
    {super(message);}
  }</pre></b>
</td></tr></tbody>
</table>



<!-- Catching and Rethrowing Exception -->

</a><a name="CatchThrow"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width="20%"><b>Catching and Rethrowing Exceptions</b></td>
<td width="80%">
  Sometimes it is useful in a method to catch an exception that has been
    thrown, process it a bit in the method itself, and then rethrow the same
    (or a different) exception.
  Note that writing
  <pre><b>  catch (RuntimeException re)
    {
      System.out.println("Runtime exception: " + re.getMessage();
      throw re;
    }</b></pre>
  tells Java to catch any <b>RuntimeException</b> (or one of its subclasses),
    print an error message, and then rethrow the same exception; here the
    <b>throw</b> statement indicates to throw not a new exception, but whatever
    exception object <b>re</b> now refers to.
  <p>
  Suppose that the class <b>Item</b> defines the following method
  </p><pre><b>  public static Item readFromFile(TypedBufferReader tbr)
    throws EOFException, IllegalStateException</b></pre>
  This method either returns a reference to an <b>Item</b>, throws an
     <b>EOFException</b> (if there are no more items to read), or throws an
     <b>IllegalStateException</b> (if the data in the file is not what is 
     expected: that generalizes something like <b>NumberFormatException</b>).
  <p>
  Now suppose the class <b>Database</b> defines a <b>load</b> method that
    wants to read all the <b>Item</b>s from a file into a database (storing
    them in an array, represented by <b>db</b> and <b>used</b>).
  We can write this method as
  </p><pre><b>  public void load () throws IOException
  {
    TypedBufferReader tbr = 
      new TypedBufferReader("Enter name of file with items")  

    for(used=0;;used++)
      try {
        if (used == db.length)
          doubleLength();
        db[used] = Item.readFromFile(tbr);
      }catch (EOFException eofe)
         {break;}
       catch {IllegalStateException ise )
         {
           System.out.println("Error reading Item in DB: "
                              + ise.getMessage());
           throw new IOException("load: Error reading file");
         }
  }</b></pre>
  So, in the expected case, this method catches an <b>EOFException</b> and
    terminates the loop and returns (successfully loading the database with
    items).
  But, if this method catches an <b>IllegalStateException</b> it first prints
    an error, (including this exception's message).
  Then this method itself throws an <b>IOException</b> (to be handled by
   whoever calls this method).
  This code is sophisticated, but it should not be beyond your capability to
    understand.
</td>
</tr></tbody>
</table>




<!-- Problem Set -->

</a><a name="ProblemSet"><hr align="left" width="33%">
<table cellspacing="0" cellpadding="5" border="0" rules="none" width="100%">
<tbody>
<tr valign="top">
<td width="20%"><b>Problem Set</b></td>
<td width="80%">
  To ensure that you understand all the material in this lecture, please solve
    the the announced problems after you read the lecture.
  <p>
  If you get stumped on any problem, go back and read the relevant part of the
     lecture.
  If you still have questions, please get help from the Instructor, a CA,
    or any other student.

</p><ol> 
<li>In what packages are the following exceptions declared; are they 
     categorized as checked or unchecked:
     <b>ClassCastException</b>,
     <b>EOFException</b>,
     <b>IllegalArgumentException</b>,
     <b>IllegalStateException</b>,
     <b>IndexOutOfBounds</b>,
     <b>NumberFormatException</b>,
     <b>NullPointerException</b>.
<p>
</p></li><li>We declare exception classes with a one parameter constructor
  (<b>String</b>); in what class is this value actually stored as an
  instance variable.
<p>
</p></li><li>Draw the full inheritance hierarchy exhibited by the following jumbled 
      class definitions (along with any other Java classes that you must
      include to write the full hierarchy).
<b><pre>  public class A extends Exception {...}
  public class E extends RuntimeException {...}
  public class F extends D {...}
  public class G {...}
  public class C extends E {...}
  public class D extends A {...}
  public class B extends A {...}</pre></b>
Now, using only the classes in the hierarchy above, list all the classes whose
  objects can be caught by the following catch parts of a try/catch statement.
<b><pre>  catch (A a){...}
  catch (RuntimeException re){...}
  catch (G g){...}
  catch (F f){...}</pre></b>
<p>
</p></li><li>Do you think the following code fragment is legal (both catch clauses
      using the same identifier <b>e</b>)?
    Explain your answer.
<b><pre>  try {
    .....
  }catch (EOFException e) {...}
   catch (IOException  e) {...}</pre></b>
<p>
</p></li><li>In the lecture we some code like the following.
  <b><pre>  int sum = 0;
  for(int i=0;;i++)
    try {
      ...do some complicated array stuff here
      sum += a[i]
    }catch (IndexOutOfBoundsException ioobe) {break;}</pre></b>
Suppose that we wrote the "complicated array stuff" code incorrectly
  and it accessed an array out of bounds; explain why would the code
  <b><pre>  int sum = 0;
  for(int i=0; i&lt;a.length; i++) {
    ...do some complicated array stuff here
    sum += a[i]
  }</pre></b>
be better.
</li></ol>
</td>
</tr></tbody>
</table>




</a></body></html>